//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerFiles", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class ServerFiles : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastChangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] filesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFile {
            get {
                return this.IsFileField;
            }
            set {
                if ((this.IsFileField.Equals(value) != true)) {
                    this.IsFileField = value;
                    this.RaisePropertyChanged("IsFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastChange {
            get {
                return this.LastChangeField;
            }
            set {
                if ((this.LastChangeField.Equals(value) != true)) {
                    this.LastChangeField = value;
                    this.RaisePropertyChanged("LastChange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] files {
            get {
                return this.filesField;
            }
            set {
                if ((object.ReferenceEquals(this.filesField, value) != true)) {
                    this.filesField = value;
                    this.RaisePropertyChanged("files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Regist", ReplyAction="http://tempuri.org/IService1/RegistResponse")]
        string Regist(Client.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Regist", ReplyAction="http://tempuri.org/IService1/RegistResponse")]
        System.Threading.Tasks.Task<string> RegistAsync(Client.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Upload", ReplyAction="http://tempuri.org/IService1/UploadResponse")]
        string Upload(System.IO.Stream input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Upload", ReplyAction="http://tempuri.org/IService1/UploadResponse")]
        System.Threading.Tasks.Task<string> UploadAsync(System.IO.Stream input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Download", ReplyAction="http://tempuri.org/IService1/DownloadResponse")]
        System.IO.Stream Download(string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Download", ReplyAction="http://tempuri.org/IService1/DownloadResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadAsync(string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReadAll", ReplyAction="http://tempuri.org/IService1/ReadAllResponse")]
        string[] ReadAll(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ReadAll", ReplyAction="http://tempuri.org/IService1/ReadAllResponse")]
        System.Threading.Tasks.Task<string[]> ReadAllAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFolder", ReplyAction="http://tempuri.org/IService1/CreateFolderResponse")]
        string CreateFolder(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFolder", ReplyAction="http://tempuri.org/IService1/CreateFolderResponse")]
        System.Threading.Tasks.Task<string> CreateFolderAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFile", ReplyAction="http://tempuri.org/IService1/CreateFileResponse")]
        string CreateFile(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFile", ReplyAction="http://tempuri.org/IService1/CreateFileResponse")]
        System.Threading.Tasks.Task<string> CreateFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Delete", ReplyAction="http://tempuri.org/IService1/DeleteResponse")]
        string Delete(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Delete", ReplyAction="http://tempuri.org/IService1/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Rename", ReplyAction="http://tempuri.org/IService1/RenameResponse")]
        string Rename(string old_path, string new_path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Rename", ReplyAction="http://tempuri.org/IService1/RenameResponse")]
        System.Threading.Tasks.Task<string> RenameAsync(string old_path, string new_path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFiles", ReplyAction="http://tempuri.org/IService1/SearchFilesResponse")]
        Client.ServiceReference1.ServerFiles[] SearchFiles(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchFiles", ReplyAction="http://tempuri.org/IService1/SearchFilesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.ServerFiles[]> SearchFilesAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SerchDirectories", ReplyAction="http://tempuri.org/IService1/SerchDirectoriesResponse")]
        string[] SerchDirectories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SerchDirectories", ReplyAction="http://tempuri.org/IService1/SerchDirectoriesResponse")]
        System.Threading.Tasks.Task<string[]> SerchDirectoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Log", ReplyAction="http://tempuri.org/IService1/LogResponse")]
        Client.ServiceReference1.User Log(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Log", ReplyAction="http://tempuri.org/IService1/LogResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.User> LogAsync(string login, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Regist(Client.ServiceReference1.User user) {
            return base.Channel.Regist(user);
        }
        
        public System.Threading.Tasks.Task<string> RegistAsync(Client.ServiceReference1.User user) {
            return base.Channel.RegistAsync(user);
        }
        
        public string Upload(System.IO.Stream input) {
            return base.Channel.Upload(input);
        }
        
        public System.Threading.Tasks.Task<string> UploadAsync(System.IO.Stream input) {
            return base.Channel.UploadAsync(input);
        }
        
        public System.IO.Stream Download(string file) {
            return base.Channel.Download(file);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadAsync(string file) {
            return base.Channel.DownloadAsync(file);
        }
        
        public string[] ReadAll(string path) {
            return base.Channel.ReadAll(path);
        }
        
        public System.Threading.Tasks.Task<string[]> ReadAllAsync(string path) {
            return base.Channel.ReadAllAsync(path);
        }
        
        public string CreateFolder(string path) {
            return base.Channel.CreateFolder(path);
        }
        
        public System.Threading.Tasks.Task<string> CreateFolderAsync(string path) {
            return base.Channel.CreateFolderAsync(path);
        }
        
        public string CreateFile(string path) {
            return base.Channel.CreateFile(path);
        }
        
        public System.Threading.Tasks.Task<string> CreateFileAsync(string path) {
            return base.Channel.CreateFileAsync(path);
        }
        
        public string Delete(string path) {
            return base.Channel.Delete(path);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(string path) {
            return base.Channel.DeleteAsync(path);
        }
        
        public string Rename(string old_path, string new_path) {
            return base.Channel.Rename(old_path, new_path);
        }
        
        public System.Threading.Tasks.Task<string> RenameAsync(string old_path, string new_path) {
            return base.Channel.RenameAsync(old_path, new_path);
        }
        
        public Client.ServiceReference1.ServerFiles[] SearchFiles(string path) {
            return base.Channel.SearchFiles(path);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.ServerFiles[]> SearchFilesAsync(string path) {
            return base.Channel.SearchFilesAsync(path);
        }
        
        public string[] SerchDirectories() {
            return base.Channel.SerchDirectories();
        }
        
        public System.Threading.Tasks.Task<string[]> SerchDirectoriesAsync() {
            return base.Channel.SerchDirectoriesAsync();
        }
        
        public Client.ServiceReference1.User Log(string login, string password) {
            return base.Channel.Log(login, password);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.User> LogAsync(string login, string password) {
            return base.Channel.LogAsync(login, password);
        }
    }
}
